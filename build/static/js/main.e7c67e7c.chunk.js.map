{"version":3,"sources":["App.js","../node_modules/express/lib sync","index.js","registerServiceWorker.js"],"names":["express","require","app","use","req","res","next","status","links","static","module","server","listen","process","PORT","console","log","address","port","exports","webpackEmptyContext","e","Error","code","keys","resolve","id","ReactDOM","render","document","getElementById","navigator","window","addEventListener","swUrl","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","catch","error"],"mappings":"qGAAA,YAEA,IAAIA,EAAUC,EAAQ,KAClBC,EAAMF,IAgBV,GAbAE,EAAIC,KAAI,SAASC,EAAKC,EAAKC,GAKvB,OAJFD,EAAIE,OAAO,KAAKC,MAAM,CACpB,0BACI,iDAEGF,OAGXJ,EAAIC,IAAIH,EAAQS,OAAO,WAKnBC,IAAWT,SACb,IAAIU,EAAST,EAAIU,OAAOC,kEAAYC,MAAQ,MAAM,WAChDC,QAAQC,IAAI,2BAA4BL,EAAOM,UAAUC,SAI7DR,EAAOS,QAAUjB,I,iLCzBjB,SAASkB,EAAoBhB,GAC5B,IAAIiB,EAAI,IAAIC,MAAM,uBAAyBlB,EAAM,KAEjD,MADAiB,EAAEE,KAAO,mBACHF,EAEPD,EAAoBI,KAAO,WAAa,MAAO,IAC/CJ,EAAoBK,QAAUL,EAC9BV,EAAOS,QAAUC,EACjBA,EAAoBM,GAAK,K,8MCFzBC,IAASC,OAAO,kBAAC,IAAD,MAASC,SAASC,eAAe,SCKA,kBAAmBC,WAC9DC,OAAOC,iBAAiB,QAAQ,WAC9B,IAAMC,EAAK,UAAMrB,uBAAN,sBACXkB,UAAUI,cACPC,SAASF,GACTG,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfZ,UAAUI,cAAcS,WAK1B7B,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrB6B,OAAM,SAAAC,GACL/B,QAAQ+B,MAAM,4CAA6CA,W","file":"static/js/main.e7c67e7c.chunk.js","sourcesContent":["'use strict';\n\nlet express = require('express');\nlet app = express();\n\n// All of our paths have the Link header.\napp.use(function(req, res, next) {\n  res.status(200).links({\n    'payment-method-manifest':\n        'https://bobpay.xyz/pay/payment-manifest.json',\n    });\n    return next();\n});\n// We are mostly a static website.\napp.use(express.static('public'));\n\n/**\n * Starts the server.\n */\nif (module === require.main) {\n  let server = app.listen(process.env.PORT || 8080, function() {\n    console.log('App listening on port %s', server.address().port);\n  });\n}\n\nmodule.exports = app;","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 225;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nexport default function register() {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n        navigator.serviceWorker\n          .register(swUrl)\n          .then(registration => {\n            registration.onupdatefound = () => {\n              const installingWorker = registration.installing;\n              installingWorker.onstatechange = () => {\n                if (installingWorker.state === 'installed') {\n                  if (navigator.serviceWorker.controller) {\n                    // At this point, the old content will have been purged and\n                    // the fresh content will have been added to the cache.\n                    // It's the perfect time to display a \"New content is\n                    // available; please refresh.\" message in your web app.\n                    console.log('New content is available; please refresh.');\n                  } else {\n                    // At this point, everything has been precached.\n                    // It's the perfect time to display a\n                    // \"Content is cached for offline use.\" message.\n                    console.log('Content is cached for offline use.');\n                  }\n                }\n              };\n            };\n          })\n          .catch(error => {\n            console.error('Error during service worker registration:', error);\n          });\n      });\n    }\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister();\n      });\n    }\n  }"],"sourceRoot":""}